#Reading data
df <- read.csv("C:/Users/Swapnil Kumar Vaish/Documents/R/TheSparksFoundation_Internship/Prediction Using Supervised ML/data.csv")
View(df)
head(df,10)
head(df,10)
library(ggplot2)
ggplot(data = df, aes(x=Hours, y = Scores)) + geom_point(fill="red")
library(ggplot2)
ggplot(data = df, aes(x=Hours, y = Scores)) + geom_point(colour = "red") +  ggtitle(" Hours vs  Score ") + xlab("Hours of study") + ylab("Scores")
library(ggplot2)
ggplot(data = df, aes(x=Hours, y = Scores)) + geom_point(colour = "red", Scores ~ Hours) +  ggtitle(" Hours vs  Score ") + xlab("Hours of study") + ylab("Scores")
library(ggplot2)
ggplot(data = df, aes(x=Hours, y = Scores)) + geom_point(colour = "red") +  ggtitle(" Hours vs  Score ") + xlab("Hours of study") + ylab("Scores")
train <- sample(1:nrow(df), 0.8 * nrow(df))
train <- sample(1:nrow(df), 0.8 * nrow(df))
test <- setdiff(1:nrow(df, train))
train <- sample(1:nrow(df), 0.8 * nrow(df))
test <- setdiff(1:nrow(df), train)
train <- sample(1:nrow(df), 0.66 * nrow(df))
test <- setdiff(1:nrow(df), train)
##Build X_train, y_train, X_test, y_test
#X_train <- df[train,]
##Build X_train, y_train, X_test, y_test
X_train <- df[train, -8]
View(X_train)
##Build X_train, y_train, X_test, y_test
X_train <- df[train, -1]
train <- sample(1:nrow(df), 0.66 * nrow(df))
test <- setdiff(1:nrow(df), train)
##Build X_train, y_train, X_test, y_test
X_train <- df[train, -1]
y_train <- df[train, "Scores"]
X_test <- df[test, -1]
y_test <- df[test, "Scores"]
model_lm <- lm(X_train ~ y_train)
View(model_lm)
model_lm <- lm(X_train ~ y_train)
#plotting the regression line
summary(model_lm)
plot(model_lm)
plot(X_test, y_test)
abline(model_lm)
## Plotting for the test data
plot(X_test, y_test)
abline(model_lm)
## Plotting for the test data
plot(X_test, y_test, colour = "red") + xlab("Hours") + ylab("Scores")
## Plotting for the test data
plot(X_test, y_test) + xlab("Hours") + ylab("Scores")
scatter.smooth(X_test,y_test, model_lm)
scatter.smooth(X_test,y_test, colour = "red")
scatter.smooth(X_test,y_test, color = "red")
scatter.smooth(X_test,y_test, lpars = list(col="Red"))
X_test
train <- sample(1:nrow(df), 0.66 * nrow(df))
test <- setdiff(1:nrow(df), train)
##Build X_train, y_train, X_test, y_test
X_train <- df[train, 1]
y_train <- df[train, "Scores"]
X_test <- df[test, 1]
y_test <- df[test, "Scores"]
model_lm <- lm(X_train ~ y_train)
#plotting the regression line
summary(model_lm)
plot(model_lm)
## Plotting for the test data
scatter.smooth(X_test,y_test, lpars = list(col="Red"))
X_test
pred <- predict(lm(X_test))
pred <- predict(model_lm, X_test)
pred <- predict(model_lm, new.X_test)
pred <- predict(model_lm, X_test)
X_test
pred <- predict(model_lm, data.frame(X_test))
pred
##ACtual vs predicted
df1 <- data.frame("ACtual" = y_test, "Predicted" = pred)
X_test
pred <- predict(model_lm, data.frame(X_test))
pred
df <- read.csv("C:/Users/Swapnil Kumar Vaish/Documents/R/TheSparksFoundation_Internship/Prediction Using Supervised ML/data.csv")
head(df,10)
df <- read.csv("C:/Users/Swapnil Kumar Vaish/Documents/R/TheSparksFoundation_Internship/Prediction Using Supervised ML/data.csv")
head(df,10)
library(ggplot2)
ggplot(data = df, aes(x=Hours, y = Scores)) + geom_point(colour = "red") +  ggtitle(" Hours vs  Score ") + xlab("Hours of study") + ylab("Scores")
train <- sample(1:nrow(df), 0.66 * nrow(df))
test <- setdiff(1:nrow(df), train)
train
real_df <- read.csv("C:/Users/Swapnil Kumar Vaish/Documents/R/Data Mining/Q5/BCW_data.csv")
View(real_df)
set.seed(1011)
split <- sample.split(df$Scores, SplitRatio = 0.66)
library(caTools)
set.seed(1011)
split <- sample.split(df$Scores, SplitRatio = 0.66)
training_set = subset(df, split == T)
test_set = subset(df,split == F)
View(training_set)
##Build X_train, y_train, X_test, y_test
X_train <- df[training_set, 1]
##Build X_train, y_train, X_test, y_test
X_train <- training_set$Hours
y_train <- training_set$Scores
X_test <- test_set$Hours
y_test <- test_set$Scores
model_lm <- lm(X_train ~ y_train)
#plotting the regression line
summary(model_lm)
plot(model_lm)
## Plotting for the test data
scatter.smooth(X_test,y_test, lpars = list(col="Red"))
X_test
pred <- predict(model_lm,X_test)
pred <- predict(model_lm,X_test,type = "lm")
X_test
model_lm <- lm(X_train ~ y_train, data = df)
summary(model_lm)
plot(model_lm)
new.df <- X_test
pred <- predict(model_lm,new.df)
X_test
pred <- predict(model_lm,X_test)
pred <- predict(model_lm,X_test, interval = "confidence")
model_lm <- lm(y_train ~ X_train, data = df)
#plotting the regression line
summary(model_lm)
plot(model_lm)
## Plotting for the test data
scatter.smooth(X_test,y_test, lpars = list(col="Red"))
X_test
pred <- predict(model_lm,X_test)
rm(list=ls())
df <- read.csv("C:/Users/Swapnil Kumar Vaish/Documents/R/TheSparksFoundation_Internship/Prediction Using Supervised ML/data.csv")
head(df,10)
head(df,10)
library(ggplot2)
ggplot(data = df, aes(x=Hours, y = Scores)) + geom_point(colour = "red") +  ggtitle(" Hours vs  Score ") + xlab("Hours of study") + ylab("Scores")
library(caTools)
set.seed(1011)
split <- sample.split(df$Scores, SplitRatio = 0.66)
training_set = subset(df, split == T)
test_set = subset(df,split == F)
##Build X_train, y_train, X_test, y_test
X_train <- training_set$Hours
y_train <- training_set$Scores
X_test <- test_set$Hours
y_test <- test_set$Scores
model_lm <- lm(y_train ~ X_train, data = df)
#plotting the regression line
summary(model_lm)
plot(model_lm)
## Plotting for the test data
scatter.smooth(X_test,y_test, lpars = list(col="Red"))
pred <- predict(model_lm, newdata =  X_test)
pred <- predict(model_lm, newdata =  y_test)
X_test
pred <- predict(model_lm, newdata =  y_test)
X_test <- data.frame(X_test)
pred <- predict(model_lm, newdata =  X_test)
pred
View(X_test)
View(X_test)
X_test <- data.frame(test_hours = X_test)
pred <- predict(model_lm, newdata =  X_test)
new <- data.frame(test_hours = X_test)
pred <- predict(model_lm, newdata =  new)
library(caTools)
set.seed(1011)
split <- sample.split(df$Scores, SplitRatio = 0.66)
training_set = subset(df, split == T)
test_set = subset(df,split == F)
##Build X_train, y_train, X_test, y_test
X_train <- training_set$Hours
y_train <- training_set$Scores
X_test <- test_set$Hours
y_test <- test_set$Scores
model_lm <- lm(y_train ~ X_train, data = df)
#plotting the regression line
summary(model_lm)
plot(model_lm)
rm(list=ls())
df <- read.csv("C:/Users/Swapnil Kumar Vaish/Documents/R/TheSparksFoundation_Internship/Prediction Using Supervised ML/data.csv")
head(df,10)
library(ggplot2)
ggplot(data = df, aes(x=Hours, y = Scores)) + geom_point(colour = "red") +  ggtitle(" Hours vs  Score ") + xlab("Hours of study") + ylab("Scores")
library(caTools)
set.seed(1011)
split <- sample.split(df$Scores, SplitRatio = 0.66)
training_set = subset(df, split == T)
test_set = subset(df,split == F)
##Build X_train, y_train, X_test, y_test
X_train <- training_set$Hours
y_train <- training_set$Scores
X_test <- test_set$Hours
y_test <- test_set$Scores
model_lm <- lm(y_train ~ X_train, data = df)
#plotting the regression line
summary(model_lm)
plot(model_lm)
## Plotting for the test data
scatter.smooth(X_test,y_test, lpars = list(col="Red"))
new <- data.frame(test_hours = X_test)
pred <- predict(model_lm, newdata =  new)
pred
model_lm <- lm(y_train ~ X_train, data = training_set)
#plotting the regression line
summary(model_lm)
plot(model_lm)
## Plotting for the test data
scatter.smooth(X_test,y_test, lpars = list(col="Red"))
library(caTools)
set.seed(1011)
split <- sample.split(df$Scores, SplitRatio = 0.66)
training_set = subset(df, split == T)
test_set = subset(df,split == F)
rm(list=ls())
df <- read.csv("C:/Users/Swapnil Kumar Vaish/Documents/R/TheSparksFoundation_Internship/Prediction Using Supervised ML/data.csv")
head(df,10)
library(ggplot2)
ggplot(data = df, aes(x=Hours, y = Scores)) + geom_point(colour = "red") +  ggtitle(" Hours vs  Score ") + xlab("Hours of study") + ylab("Scores")
library(caTools)
set.seed(1011)
split <- sample.split(df$Scores, SplitRatio = 0.66)
training_set = subset(df, split == T)
test_set = subset(df,split == F)
model_lm <- lm(Scores ~ Hours, data = training_set)
#plotting the regression line
summary(model_lm)
plot(model_lm)
## Plotting for the test data
scatter.smooth(test_set$Hours,test_set$Scores, lpars = list(col="Red"))
pred <- predict(model_lm, newdata =  test_set)
pred
df1 <- data.frame("ACtual" = test_set$Scores, "Predicted" = pred)
df1
rm(list=ls())
library(ggplot2)
library(caTools)
df <- read.csv("C:/Users/Swapnil Kumar Vaish/Documents/R/TheSparksFoundation_Internship/Prediction Using Supervised ML/data.csv")
head(df,10)
rm(list=ls())
library(ggplot2)
library(caTools)
df <- read.csv("C:/Users/Swapnil Kumar Vaish/Documents/R/TheSparksFoundation_Internship/Prediction Using Supervised ML/data.csv")
head(df,10)
library(ggplot2)
ggplot(data = df, aes(x=Hours, y = Scores)) + geom_point(colour = "red") +  ggtitle(" Hours vs  Score ") + xlab("Hours of study") + ylab("Scores")
library(caTools)
set.seed(1011)
split <- sample.split(df$Scores, SplitRatio = 0.66)
training_set = subset(df, split == T)
test_set = subset(df,split == F)
model_lm <- lm(Scores ~ Hours, data = training_set)
#plotting the regression line
summary(model_lm)
plot(model_lm)
## Plotting for the test data
scatter.smooth(test_set$Hours,test_set$Scores, lpars = list(col="Red"))
pred <- predict(model_lm, newdata =  test_set)
pred
##ACtual vs predicted
df1 <- data.frame("Actual" = test_set$Scores, "Predicted" = pred)
df1
library(caTools)
set.seed(1011)
split <- sample.split(df$Scores, SplitRatio = 0.75)
training_set = subset(df, split == T)
test_set = subset(df,split == F)
model_lm <- lm(Scores ~ Hours, data = training_set)
#plotting the regression line
summary(model_lm)
plot(model_lm)
## Plotting for the test data
scatter.smooth(test_set$Hours,test_set$Scores, lpars = list(col="Red"))
pred <- predict(model_lm, newdata =  test_set)
pred
##ACtual vs predicted
df1 <- data.frame("Actual" = test_set$Scores, "Predicted" = pred)
df1
#Prediction for 9.25 hours
predict(model_lm, newdata =  9.25)
#Prediction for 9.25 hours
predict(model_lm, newdata =  data.frame(9.25))
#Prediction for 9.25 hours
predict(model_lm, newdata =  data.frame(9.25))
#Prediction for 9.25 hours
predict(model_lm, newdata =  data.frame(Hours = 9.25))
#Prediction for 9.25 hours
pred1 <- predict(model_lm, newdata =  data.frame(Hours = 9.25))
paste("Score predicted is ",pred1," if a student studies for 9.25 hours per day.")
#Prediction for 9.25 hours
pred1 <- predict(model_lm, newdata =  data.frame(Hours = 9.25))
paste("Score predicted is ",round(pred1)," if a student studies for 9.25 hours per day.")
library(MLmetrics)
rm(list=ls())
library(ggplot2)
library(caTools)
library(MLmetrics)
df <- read.csv("C:/Users/Swapnil Kumar Vaish/Documents/R/TheSparksFoundation_Internship/Prediction Using Supervised ML/data.csv")
head(df,10)
library(ggplot2)
ggplot(data = df, aes(x=Hours, y = Scores)) + geom_point(colour = "red") +  ggtitle(" Hours vs  Score ") + xlab("Hours of study") + ylab("Scores")
library(caTools)
set.seed(1011)
split <- sample.split(df$Scores, SplitRatio = 0.75)
training_set = subset(df, split == T)
test_set = subset(df,split == F)
model_lm <- lm(Scores ~ Hours, data = training_set)
#plotting the regression line
summary(model_lm)
plot(model_lm)
## Plotting for the test data
scatter.smooth(test_set$Hours,test_set$Scores, lpars = list(col="Red"))
pred <- predict(model_lm, newdata =  test_set)
pred
##ACtual vs predicted
df1 <- data.frame("Actual" = test_set$Scores, "Predicted" = pred)
df1
#Prediction for 9.25 hours
pred1 <- predict(model_lm, newdata =  data.frame(Hours = 9.25))
paste("Score predicted is ",round(pred1)," if a student studies for 9.25 hours per day.")
mse
mse(df1$Predicted,df1$Actual)
MSE(df1$Predicted,df1$Actual)
set.seed(1011)
split <- sample.split(df$Scores, SplitRatio = 0.66)
training_set = subset(df, split == T)
test_set = subset(df,split == F)
model_lm <- lm(Scores ~ Hours, data = training_set)
#plotting the regression line
summary(model_lm)
plot(model_lm)
## Plotting for the test data
scatter.smooth(test_set$Hours,test_set$Scores, lpars = list(col="Red"))
pred <- predict(model_lm, newdata =  test_set)
pred
##ACtual vs predicted
df1 <- data.frame("Actual" = test_set$Scores, "Predicted" = pred)
df1
#Prediction for 9.25 hours
pred1 <- predict(model_lm, newdata =  data.frame(Hours = 9.25))
paste("Score predicted is ",round(pred1)," if a student studies for 9.25 hours per day.")
MSE(df1$Predicted,df1$Actual)
